/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as appImport } from './routes/__app'
import { Route as IndexImport } from './routes/index'
import { Route as appKnowledgeIndexImport } from './routes/__app/knowledge/index'
import { Route as appDashboardIndexImport } from './routes/__app/dashboard/index'
import { Route as appClaimsIndexImport } from './routes/__app/claims/index'
import { Route as appClaimsIdIndexImport } from './routes/__app/claims/$id/index'

// Create/Update Routes

const appRoute = appImport.update({
  id: '/__app',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const appKnowledgeIndexRoute = appKnowledgeIndexImport.update({
  id: '/knowledge/',
  path: '/knowledge/',
  getParentRoute: () => appRoute,
} as any)

const appDashboardIndexRoute = appDashboardIndexImport.update({
  id: '/dashboard/',
  path: '/dashboard/',
  getParentRoute: () => appRoute,
} as any)

const appClaimsIndexRoute = appClaimsIndexImport.update({
  id: '/claims/',
  path: '/claims/',
  getParentRoute: () => appRoute,
} as any)

const appClaimsIdIndexRoute = appClaimsIdIndexImport.update({
  id: '/claims/$id/',
  path: '/claims/$id/',
  getParentRoute: () => appRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/__app': {
      id: '/__app'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof appImport
      parentRoute: typeof rootRoute
    }
    '/__app/claims/': {
      id: '/__app/claims/'
      path: '/claims'
      fullPath: '/claims'
      preLoaderRoute: typeof appClaimsIndexImport
      parentRoute: typeof appImport
    }
    '/__app/dashboard/': {
      id: '/__app/dashboard/'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof appDashboardIndexImport
      parentRoute: typeof appImport
    }
    '/__app/knowledge/': {
      id: '/__app/knowledge/'
      path: '/knowledge'
      fullPath: '/knowledge'
      preLoaderRoute: typeof appKnowledgeIndexImport
      parentRoute: typeof appImport
    }
    '/__app/claims/$id/': {
      id: '/__app/claims/$id/'
      path: '/claims/$id'
      fullPath: '/claims/$id'
      preLoaderRoute: typeof appClaimsIdIndexImport
      parentRoute: typeof appImport
    }
  }
}

// Create and export the route tree

interface appRouteChildren {
  appClaimsIndexRoute: typeof appClaimsIndexRoute
  appDashboardIndexRoute: typeof appDashboardIndexRoute
  appKnowledgeIndexRoute: typeof appKnowledgeIndexRoute
  appClaimsIdIndexRoute: typeof appClaimsIdIndexRoute
}

const appRouteChildren: appRouteChildren = {
  appClaimsIndexRoute: appClaimsIndexRoute,
  appDashboardIndexRoute: appDashboardIndexRoute,
  appKnowledgeIndexRoute: appKnowledgeIndexRoute,
  appClaimsIdIndexRoute: appClaimsIdIndexRoute,
}

const appRouteWithChildren = appRoute._addFileChildren(appRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '': typeof appRouteWithChildren
  '/claims': typeof appClaimsIndexRoute
  '/dashboard': typeof appDashboardIndexRoute
  '/knowledge': typeof appKnowledgeIndexRoute
  '/claims/$id': typeof appClaimsIdIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '': typeof appRouteWithChildren
  '/claims': typeof appClaimsIndexRoute
  '/dashboard': typeof appDashboardIndexRoute
  '/knowledge': typeof appKnowledgeIndexRoute
  '/claims/$id': typeof appClaimsIdIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/__app': typeof appRouteWithChildren
  '/__app/claims/': typeof appClaimsIndexRoute
  '/__app/dashboard/': typeof appDashboardIndexRoute
  '/__app/knowledge/': typeof appKnowledgeIndexRoute
  '/__app/claims/$id/': typeof appClaimsIdIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '' | '/claims' | '/dashboard' | '/knowledge' | '/claims/$id'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '' | '/claims' | '/dashboard' | '/knowledge' | '/claims/$id'
  id:
    | '__root__'
    | '/'
    | '/__app'
    | '/__app/claims/'
    | '/__app/dashboard/'
    | '/__app/knowledge/'
    | '/__app/claims/$id/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  appRoute: typeof appRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  appRoute: appRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/__app"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/__app": {
      "filePath": "__app.tsx",
      "children": [
        "/__app/claims/",
        "/__app/dashboard/",
        "/__app/knowledge/",
        "/__app/claims/$id/"
      ]
    },
    "/__app/claims/": {
      "filePath": "__app/claims/index.tsx",
      "parent": "/__app"
    },
    "/__app/dashboard/": {
      "filePath": "__app/dashboard/index.tsx",
      "parent": "/__app"
    },
    "/__app/knowledge/": {
      "filePath": "__app/knowledge/index.tsx",
      "parent": "/__app"
    },
    "/__app/claims/$id/": {
      "filePath": "__app/claims/$id/index.tsx",
      "parent": "/__app"
    }
  }
}
ROUTE_MANIFEST_END */
